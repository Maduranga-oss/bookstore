generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  firstName String?
  lastName  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  preferences UserPreferences?
  addresses   Address[]
  orders      Order[]
  cart        Cart?
  @@map("users")
}

model UserPreferences {
  id         String  @id @default(cuid())
  userId     String  @unique
  newsletter Boolean @default(false)
  currency   String  @default("USD")
  language   String  @default("en")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("user_preferences")
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  street    String
  city      String
  state     String
  country   String
  zipCode   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]
  @@map("addresses")
}

model Book {
  id            String    @id @default(cuid())
  title         String
  author        String
  description   String?   @db.Text
  price         Decimal   @db.Decimal(10, 2)
  coverImageUrl String?
  isbn          String?   @unique
  stock         Int       @default(0)
  category      String?
  publishedDate DateTime?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  cartItems  CartItem[]
  orderItems OrderItem[]
  @@map("books")
}

model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]
  @@map("carts")
}

model CartItem {
  id       String @id @default(cuid())
  cartId   String
  bookId   String
  quantity Int    @default(1)
  cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
  @@unique([cartId, bookId])
  @@map("cart_items")
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  addressId String
  total     Decimal     @db.Decimal(10, 2)
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user    User        @relation(fields: [userId], references: [id])
  address Address     @relation(fields: [addressId], references: [id])
  items   OrderItem[]
  @@map("orders")
}

model OrderItem {
  id       String  @id @default(cuid())
  orderId  String
  bookId   String
  quantity Int
  price    Decimal @db.Decimal(10, 2)
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  book  Book  @relation(fields: [bookId], references: [id])
  @@map("order_items")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
